AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'HTTP API'

Parameters:
  UserPoolId:
    Type: String
    Description: The ID of the Cognito User Pool to use for authentication.
  Audience:
    Type: String
    Description: The audience for the JWT token.

Globals:
  Function:
    Timeout: 5
    Handler: app.lambdaHandler
    Runtime: nodejs18.x

Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: "$default"
      Auth:
        Authorizers:
          GeneralAuth:
            AuthorizationScopes:
              - email
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              # The issuer URL for the Cognito User Pool. This is used to validate the JWT token.
              # Comes from the Cognito stack
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolId}
              audience:
                - !Ref Audience
      CorsConfiguration:
        AllowMethods:
          - Get
        AllowOrigins:
          - http://localhost:8080

  # Open route, no auth
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /
            Method: get
            ApiId: !Ref HttpApi

  # Route for admins only: requires custom token (see cognito example)
  AdminLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Events:
        AdminGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
              AuthorizationScopes:
                - !Sub Admins-${Audience}
            Path: /admin
            Method: get
            ApiId: !Ref HttpApi

  # Route for Super User only: requires custom token (see cognito example)
  SULambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Events:
        SUGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
              AuthorizationScopes:
                - !Sub SuperUsers-${Audience}
            Path: /su
            Method: get
            ApiId: !Ref HttpApi

  # $default route used as catchall
  CatchAllLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Events:
        CatchAllGet:
          Type: HttpApi

  # Route for Admins and SU only: requires custom token (see cognito example)
  BothLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Events:
        BothGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
              AuthorizationScopes:
                - !Sub Admins-${Audience}
                - !Sub SuperUsers-${Audience}
            Path: /both
            Method: get
            ApiId: !Ref HttpApi

Outputs:
  ApiEndpoint:
    Description: "HTTP API endpoint URL"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"

      # CognitoUserPool:
  #   Type: AWS::Cognito::UserPool
  #   Properties:
  #     UserPoolName: MyAppUserPool
  #     AutoVerifiedAttributes:
  #       - email
  #     UsernameAttributes:
  #       - email
  
  # CognitoResourceServer:
  #   Type: AWS::Cognito::UserPoolResourceServer
  #   Properties:
  #     Identifier: myapi  # Youâ€™ll use this to build scopes like myapi/admin
  #     Name: My API Resource Server
  #     UserPoolId: !Ref CognitoUserPool
  #     Scopes:
  #       - ScopeName: admin
  #         ScopeDescription: Admin access

  # CognitoUserPoolClient:
  #   Type: AWS::Cognito::UserPoolClient
  #   Properties:
  #     ClientName: MyAppClient
  #     UserPoolId: !Ref CognitoUserPool
  #     GenerateSecret: false
  #     AllowedOAuthFlows:
  #       - code
  #       - implicit
  #     AllowedOAuthScopes:
  #       - email
  #       - openid
  #       - profile
  #       - myapi/admin
  #     CallbackURLs:
  #       - http://localhost:8080
  #     AllowedOAuthFlowsUserPoolClient: true

  # # host authentication flow on cognito domain
  # # https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-using-domain.html
  # UserPoolDomain:
  #   Type: AWS::Cognito::UserPoolDomain
  #   Properties: 
  #     Domain: !Sub ${AppName}-${AWS::AccountId}
  #     UserPoolId: !Ref CognitoUserPool